'''  
‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà   ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ
‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà   ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñÑ‚ñà

–ö–∞–Ω–∞–ª: https://t.me/Nazomi_Modules

--------------------------------------------------------------------
–ê–≤—Ç–æ—Ä: @Murex55 & –º–æ–π –∫–æ—Ç –ú–∞—Å–∏–∫ ‚ô•Ô∏è
–ò–º—è: AutoRentalPRD
–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ MineEVO
--------------------------------------------------------------------
'''

# meta developer: @Nazomi_Modules
__version__ = (1, 0, 0)

from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest
import asyncio
import re
import requests

@loader.tds
class AutoRentalPRD(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ MineEVO"""
    strings = {
        "name": "AutoRentalPRD"
    }

    URL = "https://pastebin.com/raw/3TwQxHF3"

    def __init__(self):
        self.client = None
        self.subject_dict = {}
        self.work_command = None

    async def client_ready(self, client, db):
        self.client = client
        await self.load_data()
        asyncio.create_task(self.auto_update_loop())
        try:
            await client(JoinChannelRequest("@Nazomi_Modules"))
        except Exception:
            pass

    async def load_data(self):
        try:
            response = requests.get(self.URL)
            response.raise_for_status()
            data = response.json()
            self.subject_dict = data.get("subject_dict", {})
            self.work_command = data.get("work", None)
        except Exception:
            self.work_command = None

    async def auto_update_loop(self):
        while True:
            await asyncio.sleep(180)
            await self.load_data()
            if self.work_command:
                try:
                    parts = self.work_command.strip().split(maxsplit=2)
                    if len(parts) == 3:
                        subject = parts[0].strip().lower()
                        nickname = parts[1].strip()
                        time_str = parts[2].strip()
                        await self._process_interaction(None, subject, nickname, time_str, silent=True)
                except Exception:
                    pass
            await asyncio.sleep(180)

    def _validate_time_format(self, time_str: str) -> bool:
        return bool(re.match(r"^\d+[–º—á–¥]$", time_str))

    async def _refresh_message(self, message: Message) -> Message:
        if not message:
            return None
        try:
            msgs = await self.client.get_messages(message.peer_id, ids=[message.id])
            return msgs[0] if msgs else message
        except Exception:
            return message

    async def _find_and_click_button(self, message: Message, search_text: str, exclude_handshake: bool = False) -> bool:
        message = await self._refresh_message(message)
        if not message or not message.buttons:
            return False
        for row in message.buttons:
            for button in row:
                if exclude_handshake and "ü§ù" in button.text:
                    continue
                if search_text in button.text:
                    try:
                        await button.click()
                        await asyncio.sleep(2)
                        return True
                    except Exception:
                        return False
        return False

    async def _process_interaction(self, message: Message, subject: str, nickname: str, time_str: str, silent: bool = False) -> None:
        subject_emoji = self.subject_dict.get(subject.lower())

        if not subject_emoji:
            if not silent and message:
                await message.edit(
                    f"<emoji document_id=5240241223632954241>üö´</emoji><b> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>"
                )
            return

        if not self._validate_time_format(time_str):
            if not silent and message:
                await message.edit(
                    f"<emoji document_id=5382194935057372936>‚è±</emoji><b> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n–ü—Ä–∏–º–µ—Ä—ã: </b><code>5–º</code><b> , </b><code>1—á</code><b> , </b><code>1–¥</code>"
                )
            return

        try:
            if not silent and message:
                await message.edit(
                    f"<emoji document_id=5429116151391070736>üõÑ</emoji><b> –í—ã–¥–∞—é {subject_emoji} –∏–≥—Ä–æ–∫—É {nickname}...</b>"
                )

            await self.client.send_message(5522271758, "üß§ –ü—Ä–µ–¥–º–µ—Ç—ã")

            start_time = asyncio.get_event_loop().time()
            bot_message = None
            while asyncio.get_event_loop().time() - start_time < 10:
                bot_messages = await self.client.get_messages(5522271758, limit=1)
                for msg in bot_messages:
                    if "üëú –¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã" in msg.text:
                        bot_message = msg
                        break
                if bot_message:
                    break

            if not bot_message:
                raise ValueError("<emoji document_id=5386367538735104399>‚åõ</emoji> –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</b>")

            subject_found = False
            for _ in range(5):
                await asyncio.sleep(2)
                bot_message = await self._refresh_message(bot_message)
                if await self._find_and_click_button(bot_message, subject_emoji, exclude_handshake=True):
                    subject_found = True
                    break
                if not await self._find_and_click_button(bot_message, "–í–ø–µ—Ä—ë–¥ ¬ª"):
                    break

            if not subject_found:
                raise ValueError(f"<emoji document_id=5145388477218554646>‚õîÔ∏è</emoji><b> –ü—Ä–µ–¥–º–µ—Ç {subject_emoji} –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>")

            if not await self._find_and_click_button(bot_message, "ü§ù"):
                raise ValueError("<emoji document_id=5145388477218554646>‚õîÔ∏è</emoji><b> –ö–Ω–æ–ø–∫–∞ <i>ü§ù –î–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>")

            await self.client.send_message(5522271758, f"{nickname} {time_str}", reply_to=bot_message.id)
            await asyncio.sleep(2)

            if not await self._find_and_click_button(bot_message, "üíú –î–æ–≤–µ—Ä–∏—Ç—å"):
                raise ValueError("<emoji document_id=5145388477218554646>‚õîÔ∏è</emoji><b> –ö–Ω–æ–ø–∫–∞ <i>üíú –î–æ–≤–µ—Ä–∏—Ç—å</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>")

            if not silent and message:
                await message.edit(
                    f"<emoji document_id=5380056101473492248>üëú</emoji><b> –í—ã–¥–∞–ª <i>{subject_emoji}</i> –≤ –∞—Ä–µ–Ω–¥—É –∏–≥—Ä–æ–∫—É <i>{nickname}</i> –Ω–∞ <i>{time_str}</i></b>"
                )

        except Exception as e:
            if not silent and message:
                await message.edit(f"<b>{str(e)}</b>")

    @loader.command()  
    async def rent(self, message: Message) -> None:  
        """<–ø—Ä–µ–¥–º–µ—Ç> <–Ω–∏–∫> <–≤—Ä–µ–º—è>"""  
        raw_args = utils.get_args_raw(message)  
        args = [arg.strip() for arg in raw_args.split(maxsplit=2) if arg.strip()]  

        if len(args) != 3:  
            await message.edit(  
                "<emoji document_id=5956561916573782596>üìÑ</emoji><b> –í–≤–µ–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n<–ø—Ä–µ–¥–º–µ—Ç> <–Ω–∏–∫> <–≤—Ä–µ–º—è></b>"  
            )  
            return  

        subject, nickname, time_str = args  
        await self._process_interaction(message, subject, nickname, time_str)